import React, { useState, useEffect } from "react";
import { View, Text, TextInput, TouchableOpacity, StyleSheet, Switch, Alert } from "react-native";
import { Picker } from "@react-native-picker/picker";
import axios from "axios";
import tokenService from "../service/tokenService";
import { jwtDecode } from "jwt-decode";
import { getProvinces, getDistrictsByProvinceId, getWardsByDistrictId } from "../service/addressService";

const EditAddressForm = ({ address, onClose, refreshAddresses }) => {
    const [name, setName] = useState("");
    const [phoneNumber, setPhoneNumber] = useState("");
    const [province, setProvince] = useState("");
    const [district, setDistrict] = useState("");
    const [ward, setWard] = useState("");
    const [detail, setDetail] = useState("");
    const [isDefault, setIsDefault] = useState(false);

    const [provinces, setProvinces] = useState([]);
    const [districts, setDistricts] = useState([]);
    const [wards, setWards] = useState([]);

    // Load th√¥ng tin ƒë·ªãa ch·ªâ khi m·ªü form
    useEffect(() => {
        if (address) {
            setName(address.name || "");
            setPhoneNumber(address.phoneNumber || "");
            setProvince(address.province?.id?.toString() || "");
            setDistrict(address.district?.id?.toString() || "");
            setWard(address.ward?.id?.toString() || "");
            setDetail(address.addressDetail || "");
            setIsDefault(address.isDefault || false);
            console.log("üìå D·ªØ li·ªáu address nh·∫≠n v√†o:", address);
        } else {
            console.log("‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu address khi m·ªü form!");
        }
    }, [address]);


    // Load danh s√°ch t·ªânh
    useEffect(() => {
        getProvinces().then(data => setProvinces(data || []));
    }, []);

    // Load qu·∫≠n khi ch·ªçn t·ªânh
    useEffect(() => {
        if (province) {
            getDistrictsByProvinceId(province).then(data => {
                setDistricts(data || []);
                if (!address || !address.district?.id) { // Ch·ªâ reset khi kh√¥ng c√≥ gi√° tr·ªã c≈©
                    setDistrict("");
                }
            });
        }
    }, [province]);

    useEffect(() => {
        if (district) {
            getWardsByDistrictId(district).then(data => {
                setWards(data || []);
                if (!address || !address.ward?.id) { // Ch·ªâ reset khi kh√¥ng c√≥ gi√° tr·ªã c≈©
                    setWard("");
                }
            });
        }
    }, [district]);

    // X·ª≠ l√Ω c·∫≠p nh·∫≠t ƒë·ªãa ch·ªâ
    const handleUpdate = async () => {
        if (!name || !phoneNumber || !province || !district || !ward || !detail) {
            Alert.alert("L·ªói", "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!");
            return;
        }
        console.log("üìå Ki·ªÉm tra tr∆∞·ªõc khi g·ª≠i:", { province, district, ward });
        if (!province || !district || !ward) {
            Alert.alert("L·ªói", "Vui l√≤ng ch·ªçn ƒë·∫ßy ƒë·ªß T·ªânh/Qu·∫≠n/X√£!");
            return;
        }
        const token = await tokenService.getToken();
        const decodedToken = jwtDecode(token);
        const userEmail = decodedToken?.email;
        const addressId = address?._id || "";
        console.log("üìå Address ID khi g·ª≠i API:", addressId);

        if (!addressId) {
            Alert.alert("L·ªói", "Kh√¥ng t√¨m th·∫•y ID c·ªßa ƒë·ªãa ch·ªâ c·∫ßn c·∫≠p nh·∫≠t!");
            return;
        }
        console.log("üìå Address ID khi g·ª≠i API:", addressId);

        if (!userEmail || !addressId) {
            Alert.alert("L·ªói", "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá!");
            return;
        }

        console.log("üìå D·ªØ li·ªáu tr∆∞·ªõc khi g·ª≠i:", {
            email: userEmail,
            addressId,
            name,
            phoneNumber,
            provinceId: province,
            districtId: district,
            wardCode: ward,
            addressDetail: detail.trim(),
            isDefault,
        });



        try {
            const response = await axios.post("http://10.0.2.2:5000/v1/user/update-address", {
                email: userEmail,
                addressId,
                name,
                phoneNumber,
                provinceId: province,
                districtId: district,
                wardCode: ward,
                addressDetail: detail.trim(),
                isDefault,
            }, {
                headers: { Authorization: `Bearer ${token}` }
            });

            console.log("üìå Danh s√°ch ƒë·ªãa ch·ªâ nh·∫≠n ƒë∆∞·ª£c:", response.data);
            console.log("‚úÖ API Response:", response.data);
            Alert.alert("Th√†nh c√¥ng", "ƒê·ªãa ch·ªâ ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t!");
            refreshAddresses();
            onClose();
        } catch (error) {
            console.error("‚ùå Update Error:", error.response?.data || error.message);
            Alert.alert("L·ªói", error.response?.data?.message || "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t ƒë·ªãa ch·ªâ. Vui l√≤ng th·ª≠ l·∫°i!");
        }
    };

    return (
        <View style={styles.container}>
            <Text style={styles.header}>Ch·ªânh s·ª≠a ƒë·ªãa ch·ªâ</Text>

            <Text style={styles.label}>H·ªç v√† t√™n</Text>
            <TextInput style={styles.input} value={name} onChangeText={setName} />

            <Text style={styles.label}>S·ªë ƒëi·ªán tho·∫°i</Text>
            <TextInput style={styles.input} value={phoneNumber} onChangeText={setPhoneNumber} keyboardType="phone-pad" maxLength={10} />

            <Text style={styles.label}>T·ªânh/Th√†nh ph·ªë</Text>
            <Picker selectedValue={province} onValueChange={(value) => {
                console.log("‚úÖ Province changed:", value);
                setProvince(value);
            }} style={styles.picker}>
                <Picker.Item label="Ch·ªçn T·ªânh/Th√†nh ph·ªë" value="" />
                {provinces.map((p) => (
                    <Picker.Item key={p.ProvinceID} label={p.ProvinceName} value={p.ProvinceID} />
                ))}
            </Picker>

            <Text style={styles.label}>Qu·∫≠n/Huy·ªán</Text>
            <Picker selectedValue={district} onValueChange={(value) => {
                console.log("‚úÖ District changed:", value);
                setDistrict(value);
            }} style={styles.picker} enabled={!!province}>
                <Picker.Item label="Ch·ªçn Qu·∫≠n/Huy·ªán" value="" />
                {districts.map((d) => (
                    <Picker.Item key={d.DistrictID} label={d.DistrictName} value={d.DistrictID} />
                ))}
            </Picker>

            <Text style={styles.label}>Ph∆∞·ªùng/X√£</Text>
            <Picker selectedValue={ward} onValueChange={(value) => {
                console.log("üìå Ward ch·ªçn:", value);
                setWard(value);
            }} style={styles.picker} enabled={!!district}>
                <Picker.Item label="Ch·ªçn Ph∆∞·ªùng/X√£" value="" />
                {wards.map((w) => (
                    <Picker.Item key={w.WardCode} label={w.WardName} value={w.WardCode} />
                ))}
            </Picker>

            <Text style={styles.label}>ƒê·ªãa ch·ªâ c·ª• th·ªÉ</Text>
            <TextInput style={styles.input} value={detail} onChangeText={setDetail} />
            <View style={styles.switchContainer}>
                <Text>ƒê·∫∑t l√†m m·∫∑c ƒë·ªãnh</Text>
                <Switch value={isDefault} onValueChange={setIsDefault} />
            </View>
            <TouchableOpacity style={styles.saveButton} onPress={handleUpdate}>
                <Text style={styles.saveButtonText}>L∆∞u</Text>
            </TouchableOpacity>
            <TouchableOpacity style={styles.cancelButton} onPress={onClose}>
                <Text style={styles.cancelButtonText}>H·ªßy</Text>
            </TouchableOpacity>
        </View>
    );
};

const styles = StyleSheet.create({
    container: { flex: 1, padding: 20, backgroundColor: "#fff" },
    header: { fontSize: 18, fontWeight: "bold", marginBottom: 10 },
    label: { fontSize: 14, fontWeight: "600", marginTop: 10 },
    input: { borderWidth: 1, padding: 10, marginBottom: 10 },
    picker: { height: 50, marginBottom: 10 },
    saveButton: { backgroundColor: "black", padding: 15, borderRadius: 10, alignItems: "center", marginTop: 15 },
    saveButtonText: { color: "white", fontSize: 16, fontWeight: "bold" },
    cancelButton: { backgroundColor: "gray", padding: 15, borderRadius: 10, alignItems: "center", marginTop: 10 },
    cancelButtonText: { color: "white", fontSize: 16 },
    switchContainer: { flexDirection: "row", justifyContent: "space-between", alignItems: "center", marginTop: 15 },
});

export default EditAddressForm;
