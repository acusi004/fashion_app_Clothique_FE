import axios from "axios";
import React, { useState, useEffect } from "react";
import { View, Text, TextInput, TouchableOpacity, StyleSheet, Switch, Alert } from "react-native";
import { Picker } from "@react-native-picker/picker";
import { getProvinces, getDistrictsByProvinceId, getWardsByDistrictId } from "../service/addressService";

const AddressForm = ({ onSave, onClose }) => {
    const [name, setName] = useState("");
    const [phoneNumber, setPhoneNumber] = useState(""); // üîπ Th√™m s·ªë ƒëi·ªán tho·∫°i
    const [province, setProvince] = useState("");
    const [district, setDistrict] = useState("");
    const [ward, setWard] = useState("");
    const [detail, setDetail] = useState("");
    // const [isDefault, setIsDefault] = useState(false);

    const [provinces, setProvinces] = useState([]);
    const [districts, setDistricts] = useState([]);
    const [wards, setWards] = useState([]);

    const validatePhoneNumber = (phone) => {
        if (!phone) return "Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i!";
        if (!/^\d+$/.test(phone)) return "S·ªë ƒëi·ªán tho·∫°i ch·ªâ ƒë∆∞·ª£c ch·ª©a ch·ªØ s·ªë!";
        if (phone.length !== 10) return "S·ªë ƒëi·ªán tho·∫°i ph·∫£i c√≥ ƒë√∫ng 10 ch·ªØ s·ªë!";
        if (!/^(03|05|07|08|09)[0-9]{8}$/.test(phone)) return "S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá! Vui l√≤ng nh·∫≠p s·ªë h·ª£p l·ªá t·∫°i Vi·ªát Nam.";
        return null; // H·ª£p l·ªá
    };

    useEffect(() => {
        const fetchData = async () => {
            const provincesData = await getProvinces();
            if (provincesData) setProvinces(provincesData);
        };
        fetchData();
    }, []);

    useEffect(() => {
        if (province) {
            getDistrictsByProvinceId(province).then((data) => setDistricts(data || []));
            setDistrict("");
            setWards([]);
            setWard("");
        }
    }, [province]);

    useEffect(() => {
        if (district) {
            getWardsByDistrictId(district).then((data) => setWards(data || []));
            setWard("");
        }
    }, [district]);

    const handleSave = () => {
        console.log("üìå Ki·ªÉm tra d·ªØ li·ªáu tr∆∞·ªõc khi l∆∞u:");
        console.log("Name:", name);
        console.log("Phone:", phoneNumber);
        console.log("Province:", province);
        console.log("District:", district);
        console.log("Ward:", ward);
        console.log("Detail:", detail);

        if (!name.trim() || !phoneNumber.trim() || !province || !district || !ward || !detail.trim()) {
            Alert.alert("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!");
            return;
        }

        const phoneError = validatePhoneNumber(phoneNumber.trim());
        if (phoneError) {
            Alert.alert("L·ªói", phoneError);
            return;
        }

        let newAddress = {
            name: name.trim(),
            phoneNumber: phoneNumber.trim(), // ‚úÖ Th√™m s·ªë ƒëi·ªán tho·∫°i
            addressDetail: detail.trim(),
            provinceId: Number(province),
            districtId: Number(district),
            wardCode: String(ward)
            // isDefault: isDefault
        };
        console.log("üìå D·ªØ li·ªáu g·ª≠i ƒëi:", newAddress);
        onSave(newAddress);
    };

    return (
        <View style={styles.container}>
            <Text style={styles.header}>Th√™m ƒë·ªãa ch·ªâ m·ªõi</Text>

            {/* üîπ Nh·∫≠p h·ªç t√™n */}
            <Text style={styles.label}>H·ªç v√† t√™n</Text>
            <TextInput style={styles.input} placeholder="Nh·∫≠p h·ªç v√† t√™n" value={name} onChangeText={setName} />

            {/* üîπ Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i */}
            <Text style={styles.label}>S·ªë ƒëi·ªán tho·∫°i</Text>
            <TextInput
                style={styles.input}
                placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i"
                value={phoneNumber}
                onChangeText={setPhoneNumber}
                keyboardType="phone-pad" // üõ† H·ªó tr·ª£ b√†n ph√≠m s·ªë 
                maxLength={10} // Gi·ªõi h·∫°n 10 s·ªë
            />

            <Text style={styles.label}>T·ªânh/Th√†nh ph·ªë</Text>
            <Picker selectedValue={province} onValueChange={(value) => {
                console.log("üìå Province ch·ªçn:", value);
                setProvince(value);
            }} style={styles.picker}>
                <Picker.Item label="Ch·ªçn T·ªânh/Th√†nh ph·ªë" value="" />
                {provinces.map((p, index) => (
                    <Picker.Item key={`province-${p.ProvinceID || index}`} label={p.ProvinceName} value={p.ProvinceID} />
                ))}
            </Picker>

            <Text style={styles.label}>Qu·∫≠n/Huy·ªán</Text>
            <Picker selectedValue={district} onValueChange={(value) => {
                console.log("üìå District ch·ªçn:", value);
                setDistrict(value);
            }} style={styles.picker} enabled={!!province}>
                <Picker.Item label="Ch·ªçn Qu·∫≠n/Huy·ªán" value="" />
                {districts.map((d, index) => (
                    <Picker.Item key={`district-${d.DistrictID || index}`} label={d.DistrictName} value={d.DistrictID} />
                ))}
            </Picker>

            <Text style={styles.label}>Ph∆∞·ªùng/X√£</Text>
            <Picker selectedValue={ward} onValueChange={(value) => {
                console.log("üìå Ward ch·ªçn:", value);
                setWard(value);
            }} style={styles.picker} enabled={!!district}>
                <Picker.Item label="Ch·ªçn Ph∆∞·ªùng/X√£" value="" />
                {wards.map((w, index) => (
                    <Picker.Item key={`ward-${w.WardCode || index}`} label={w.WardName} value={w.WardCode} />
                ))}
            </Picker>

            <Text style={styles.label}>ƒê·ªãa ch·ªâ c·ª• th·ªÉ</Text>
            <TextInput style={styles.input} placeholder="S·ªë nh√†, ƒë∆∞·ªùng,..." value={detail} onChangeText={setDetail} />

            {/* <View style={styles.switchContainer}>
                <Text>ƒê·∫∑t l√†m m·∫∑c ƒë·ªãnh</Text>
                <Switch
                    value={isDefault}
                    onValueChange={(value) => {
                        console.log("üìå Gi√° tr·ªã m·ªõi c·ªßa isDefault:", value);
                        setIsDefault(value);
                    }}
                />
            </View> */}

            <TouchableOpacity style={styles.saveButton} onPress={handleSave}>
                <Text style={styles.saveButtonText}>L∆∞u</Text>
            </TouchableOpacity>

            <TouchableOpacity style={styles.cancelButton} onPress={onClose}>
                <Text style={styles.cancelButtonText}>H·ªßy</Text>
            </TouchableOpacity>
        </View>
    );
};

const styles = StyleSheet.create({
    container: { flex: 1, backgroundColor: "#fff", padding: 20 },
    header: { fontSize: 18, fontWeight: "bold", marginBottom: 10 },
    label: { fontSize: 14, fontWeight: "600", marginTop: 10 },
    input: { borderWidth: 1, borderColor: "gray", borderRadius: 10, padding: 10, marginBottom: 10, backgroundColor: "#f9f9f9" },
    picker: { borderWidth: 1, borderColor: "gray", borderRadius: 10, backgroundColor: "#f9f9f9" },
    switchContainer: { flexDirection: "row", justifyContent: "space-between", alignItems: "center", marginTop: 15 },
    saveButton: { backgroundColor: "black", padding: 15, borderRadius: 10, alignItems: "center", marginTop: 15 },
    saveButtonText: { color: "white", fontSize: 16, fontWeight: "bold" },
    cancelButton: { backgroundColor: "gray", padding: 15, borderRadius: 10, alignItems: "center", marginTop: 10 },
    cancelButtonText: { color: "white", fontSize: 16 }
});

export default AddressForm;
